package com.leo.paleorecipes.data

import android.os.Parcel
import android.os.Parcelable
import android.os.Parcelable.Creator
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverters

/**
 * Data class representing a recipe in the application.
 *
 * This class is used both for Room database storage and as a model throughout the app.
 * It includes all necessary fields for recipe management, including preparation details,
 * ingredients, and instructions.
 *
 * @property id Unique identifier for the recipe (auto-generated by Room)
 * @property title The name of the recipe
 * @property description A brief description of the recipe
 * @property ingredients List of ingredients required for the recipe
 * @property instructions Step-by-step instructions for preparing the recipe
 * @property prepTime Preparation time in minutes
 * @property cookTime Cooking time in minutes
 * @property servings Number of servings the recipe makes
 * @property imageUrl URL or URI of the recipe image
 * @property category Category of the recipe (e.g., "Breakfast", "Dinner")
 * @property difficulty Difficulty level of the recipe (e.g., "Easy", "Medium", "Hard")
 * @property notes Additional notes or tips for the recipe
 * @property isUserCreated Flag indicating if the recipe was created by the user
 * @property isFavorite Flag indicating if the recipe is marked as favorite
 * @property dateAdded Timestamp when the recipe was added to the app
 */
@Entity(tableName = "recipes")
data class Recipe(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,
    val title: String,
    val description: String = "",
    @TypeConverters(Converters::class)
    val ingredients: List<String>,
    @TypeConverters(Converters::class)
    val instructions: List<String>,
    val prepTime: Int = 0, // in minutes
    val cookTime: Int = 0, // in minutes
    val servings: Int = 1,
    val imageUrl: String = "",
    val category: String = "",
    val difficulty: String = "",
    val notes: String = "",
    val isUserCreated: Boolean = false,
    val isFavorite: Boolean = false,
    val dateAdded: Long = System.currentTimeMillis(),
) : Parcelable {
    /**
     * Calculates the total time required for the recipe (prep + cook time)
     */
    val totalTime: Int
        get() = prepTime + cookTime

    /**
     * Checks if the recipe has a valid image URL
     */
    fun hasValidImageUrl(): Boolean = imageUrl.isNotBlank()

    /**
     * Converts the recipe to a map for database operations
     */
    fun toMap(): Map<String, Any?> = mapOf(
        "id" to id,
        "title" to title,
        "description" to description,
        "ingredients" to ingredients,
        "instructions" to instructions,
        "prepTime" to prepTime,
        "cookTime" to cookTime,
        "servings" to servings,
        "imageUrl" to imageUrl,
        "category" to category,
        "difficulty" to difficulty,
        "notes" to notes,
        "isUserCreated" to isUserCreated,
        "isFavorite" to isFavorite,
        "dateAdded" to dateAdded,
    )

    override fun describeContents(): Int = 0

    override fun writeToParcel(dest: Parcel, flags: Int) {
        dest.writeLong(id)
        dest.writeString(title)
        dest.writeString(description)
        dest.writeStringList(ingredients)
        dest.writeStringList(instructions)
        dest.writeInt(prepTime)
        dest.writeInt(cookTime)
        dest.writeInt(servings)
        dest.writeString(imageUrl)
        dest.writeString(category)
        dest.writeString(difficulty)
        dest.writeString(notes)
        dest.writeInt(if (isUserCreated) 1 else 0)
        dest.writeInt(if (isFavorite) 1 else 0)
        dest.writeLong(dateAdded)
    }

    companion object CREATOR : Creator<Recipe> {
        override fun createFromParcel(parcel: Parcel): Recipe {
            return Recipe(
                id = parcel.readLong(),
                title = parcel.readString() ?: "",
                description = parcel.readString() ?: "",
                ingredients = parcel.createStringArrayList() ?: emptyList(),
                instructions = parcel.createStringArrayList() ?: emptyList(),
                prepTime = parcel.readInt(),
                cookTime = parcel.readInt(),
                servings = parcel.readInt(),
                imageUrl = parcel.readString() ?: "",
                category = parcel.readString() ?: "",
                difficulty = parcel.readString() ?: "",
                notes = parcel.readString() ?: "",
                isUserCreated = parcel.readInt() == 1,
                isFavorite = parcel.readInt() == 1,
                dateAdded = parcel.readLong(),
            )
        }

        override fun newArray(size: Int): Array<Recipe?> = arrayOfNulls(size)
    }
}
