package com.leo.paleorecipes.data

import com.leo.paleorecipes.data.api.model.ApiRecipe
import com.leo.paleorecipes.data.api.model.ApiRecipeDetail

/**
 * Mapper class to convert between API and data recipe models.
 * Handles null safety and provides default values for all fields.
 */
object RecipeMapper {

    /**
     * Map API response to data model
     * @param recipeResponse The API recipe response to map
     * @param details Optional detailed recipe information
     * @return A domain [Recipe] object with all fields properly initialized
     */
    /**
     * Map API response to domain model
     * @param apiRecipe The API recipe response to map
     * @param details Optional detailed recipe information
     * @return A domain [Recipe] object with all fields properly initialized
     */
    fun mapApiResponseToData(
        apiRecipe: ApiRecipe,
        details: ApiRecipeDetail? = null,
    ): Recipe {
        // Extract and clean ingredients
        val allIngredients = mutableListOf<String>().apply {
            // Add used ingredients
            apiRecipe.usedIngredients?.mapNotNull { it.original }?.let { addAll(it) }
            // Add missed ingredients
            apiRecipe.missedIngredients?.mapNotNull { it.original }?.let { addAll(it) }
            // If no ingredients found, add a placeholder
            if (isEmpty()) {
                add("No ingredients specified")
            }
        }

        // Format instructions
        val instructions = details?.let { detail ->
            // Try to get instructions from analyzed instructions first
            val steps = detail.analyzedInstructions?.firstOrNull()?.steps
                ?.sortedBy { it.number ?: 0 }
                ?.joinToString("\n\n") { "${it.number}. ${it.step}" }
                ?.trim()

            // Fall back to simple instructions if no analyzed steps
            steps?.takeIf { it.isNotBlank() } ?: detail.instructions
        }?.takeIf { !it.isNullOrBlank() } ?: "No instructions available"

        // Get image URL with fallbacks
        val imageUrl = details?.image
            ?.takeIf { it.isNotBlank() }
            ?: apiRecipe.image
                ?.takeIf { it.isNotBlank() }
            ?: ""

        // Calculate cook time with fallback
        val cookTime = when {
            details?.readyInMinutes != null && details.readyInMinutes > 0 -> details.readyInMinutes
            apiRecipe.readyInMinutes != null && apiRecipe.readyInMinutes > 0 -> apiRecipe.readyInMinutes
            else -> 0
        }

        // Get servings with fallback
        val servings = when {
            details?.servings != null && details.servings > 0 -> details.servings
            apiRecipe.servings != null && apiRecipe.servings > 0 -> apiRecipe.servings
            else -> 1
        }

        return Recipe(
            id = 0, // Will be auto-generated by Room
            title = apiRecipe.title.ifBlank { "Untitled Recipe" },
            description = details?.summary
                ?.takeIf { it.isNotBlank() }
                ?.replace(Regex("<[^>]*>"), "") // Remove HTML tags
                ?.trim()
                ?: "No description available",
            ingredients = allIngredients,
            instructions = listOf(instructions),
            prepTime = 0, // Not available in the API response
            cookTime = cookTime ?: 0,
            servings = servings ?: 1,
            imageUrl = imageUrl,
            isUserCreated = false,
            isFavorite = false,
        )
    }

    /**
     * Map domain model to API model
     * @param recipe The domain recipe to map
     * @return An API [ApiRecipe] object
     */
    /**
     * Map domain model to API model
     * @param recipe The domain recipe to map
     * @return An [ApiRecipe] object
     */
    fun mapDataToApi(recipe: Recipe): ApiRecipe {
        return ApiRecipe(
            id = recipe.id,
            title = recipe.title,
            image = recipe.imageUrl.ifEmpty { null },
            usedIngredients = emptyList(),
            missedIngredients = emptyList(),
            unusedIngredients = emptyList(),
            readyInMinutes = recipe.cookTime,
            servings = recipe.servings,
        )
    }
}
